#!/usr/bin/env python3

#Libraries to import:
import configparser
from datetime import datetime
import os
import subprocess
import sys
import time

#CPU Commands
modelNameCommand = "lscpu | grep 'Model name:' | cut -d ':' -f 2 | xargs"
vendorIDCommand = "lscpu | grep 'Vendor ID:' | cut -d ':' -f 2 | xargs"
architectureCommand = "lscpu | grep 'Architecture:' | cut -d ':' -f 2 | xargs"
CPUUsageCommand = "top -bn2 | grep '%Cpu' | tail -1 | grep -P '(....|...) id,' | awk '{print $8}'"
physicalCoresCommand = "cat /proc/cpuinfo | grep \"cpu cores\" | uniq | cut -d':' -f2"
logicalCoresCommand = "cat /proc/cpuinfo | grep -c 'processor'"
sensorCheckCommand = "ls /sys/class/hwmon/hwmon1"
temperatureCommand = "cat /sys/class/hwmon/hwmon1/temp1_input"

#Memory Commands
memoryUsedCommand="free -m | awk '{print $3}' | tail -2 | head -1"
memoryTotalCommand="free -m | awk '{print $2}' | tail -2 | head -1"

#NIC Commands
IPCommand="hostname -I | cut -d' ' -f{}"
interfaceNameCommand="ip r | grep {} | awk {}"
macAddressCommand="cat /sys/class/net/{}/address"

#Disk Commands
dfhCommand = "df -h | grep /dev/ | grep -v zram | grep -v fuse | grep -v tmpfs {}"
#getDiskName="df -h | awk '{print $1}' | grep '/dev/' | sed 's/dev//g' | cut -d'/' -f3"

#CPU Object
class CPU:
    #Variables
    global modelName 
    global modelVendor
    global architecture
    global cores 
    global logicalCores
    global averageLoad
    global hyperThreading
    global temperature
    global summary

    #Initialization of generic values
    def __init__(self):
        self.modelName = 'GENERIC'
        self.modelVendor = 'GENERIC'
        self.architecture = 'GENERIC'
        self.cores = 0
        self.logicalCores = 0
        self.averageLoad = 0
        self.hyperThreading = False
        self.temperature = 0
    
    #Update method
    def update(self):
        #Detecting CPU Name
        shell = os.popen(modelNameCommand)
        self.modelName = shell.read().strip()

        #Detecting CPU Vendor
        shell = os.popen(vendorIDCommand)
        self.modelVendor = shell.read().strip()

        #Detecting architecture
        shell = os.popen(architectureCommand)
        self.architecture = shell.read().strip()

        #Detecting CPU maximum Load
        shell = os.popen(CPUUsageCommand)
        maxLoad = shell.read().strip()
        maxLoad = float(maxLoad)

        #Detecting number of Physical Cores
        shell = os.popen(physicalCoresCommand)
        self.cores = shell.read().strip()

        #Attempting Detection of HyperThreading
        if bool(self.cores) == False:
            #Outcome 1: CPU does not support HyperThreading
            shell = os.popen(logicalCoresCommand)
            self.logicalCores = self.cores = shell.read().strip()
        else:
            #Outcome 2: CPU does support HyperThreading
            self.hyperThreading = True
            shell = os.popen(logicalCoresCommand)
            self.logicalCores = shell.read().strip()
        
        self.cores = int(self.cores) #Setting physical cores
        self.logicalCores = int(self.logicalCores) #Setting logical cores
        self.averageLoad = float(maxLoad/self.logicalCores) #Setting average load
        self.averageLoad = round(self.averageLoad, 2) #Rounding average load to 2 decimal places

        #Getting temperatures
        #Checking if hardware device is present
        shell = os.popen(sensorCheckCommand)
        check = shell.read().strip()
        
        if bool(check) == True: 
            #Outcome 1: Hardware sensor is available
            shell = os.popen(temperatureCommand)
            self.temperature = shell.read().strip()
            self.temperature = int(self.temperature)
            
            #Temperature reading is divided by 1000 
            self.temperature = float(self.temperature/1000)
        else:
            #Outcome 2: Hardware sensor is not available
            self.temperature = 0

    #Function to export list
    def exportList(self):
        summary = {
            "modelName" : self.modelName,
            "modelVendor" : self.modelVendor,
            "architecture" : self.architecture,
            "cores" : self.cores,
            "logicalCores" : self.logicalCores,
            "averageLoad" : self.averageLoad,
            "hyperThreading" : self.hyperThreading,
            "temperature" : self.temperature
        }
        return summary

#RAM Object
class RAM:
    #Variables
    global memoryUsed
    global memoryTotal
    global memoryPercentage
    global summary

     #Initialization of generic values
    def __init__(self):
        self.memoryUsed = 0
        self.memoryTotal = 0
        self.memoryPercentage = 0
    
    #Update method
    def update(self):
        #Reading used memory in MB
        shell = os.popen(memoryUsedCommand)
        self.memoryUsed = float(shell.read())

        #Reading total memory in MB
        shell = os.popen(memoryTotalCommand)
        self.memoryTotal = float(shell.read())

        #Calculating memory percentage
        self.memoryPercentage = float((self.memoryUsed/self.memoryTotal)*100)
        self.memoryPercentage = round(self.memoryPercentage, 2) #Rounding memory percentage to 2 decimal places
    
    #Function to export list
    def exportList(self):
        summary = {
            "memoryUsed" : self.memoryUsed,
            "memoryTotal" : self.memoryTotal,
            "memoryPercentage" : self.memoryPercentage
        }
        return summary

#NIC Object
class NIC:
    #Variables
    global nicNumber
    global interfaceName
    global IP
    global MAC
    global summary
    
    #Initialization of generic values
    def __init__(self):
        self.interfaceName = "GENERIC"
        self.IP = "127.0.0.1"
        self.MAC = "00:1e:06:49:0d:a8"

    #Initialization but accepting NIC number
    def __init__(self, nicNumber):
        self.nicNumber = nicNumber
        self.interfaceName = "GENERIC"
        self.IP = "127.0.0.1"
        self.MAC = "00:1e:06:49:0d:a8"

    #Update method
    def update(self, nicNumber):
        #Reading interface IP
        shell = os.popen(IPCommand.format(nicNumber))
        self.IP = shell.read().strip()

        #Reading interface name
        shell = os.popen(interfaceNameCommand.format(self.IP,"'{print $3}'"))
        self.interfaceName = shell.read().strip()

        #Reading MAC address
        if bool(self.interfaceName) == True:
            shell=os.popen(macAddressCommand.format(self.interfaceName))
            self.MAC = shell.read().strip()
        else:
            self.MAC = False

    #Function to export list
    def exportList(self):
        summary = {
            "nicNumber" : self.nicNumber,
            "interfaceName" : self.interfaceName,
            "IP" : self.IP,
            "MAC" : self.MAC
        }
        return summary

#Disk Object
class Disk:
    #Variables
    global diskNumber
    global diskName
    global storageFree
    global storageUsed
    global totalStorage
    global diskPercentage
    global mountPoint
    
    #Function to initialize disks
    def __init__(self):
        self.diskNumber = 0
        self.diskName = "null"
        self.storageFree = 0
        self.storageUsed = 0
        self.totalStorage = 0
        self.diskPercentage = 0
        self.mountPoint = "/dev/null"
    
    #Function to initialize Disks in a more specific manner
    def __init__(diskNumber, diskName, storageFree, storageUsed, totalStorage, diskPercentage, mountPoint):
        self.diskNumber = diskNumber
        self.diskName = diskName
        self.storageFree = storageFree
        self.storageUsed = storageUsed
        self.totalStorage = totalStorage
        self.diskPercentage = diskPercentage
        self.mountPoint = mountPoint
    
    #Update method
    def update(self, diskNumber):
        #Reading disk Name
        suffix = "| head -{} | tail -1"
        awk = "| awk '{}'"

        y = 0
        while y <= 5:
            shell = os.popen(dfhCommand.format(suffix.format(self.diskNumber)+awk.format("{print $"+str(y+1)+"}")))
            if y == 0:
                self.diskName = shell.read().strip()
            if y == 1:
                self.totalStorage = shell.read().strip()
            if y == 2:
                self.storageUsed = shell.read().strip()
            if y == 3:
                self.storageFree = shell.read().strip()
            if y == 4:
                self.diskPercentage = shell.read().strip()
            if y == 5:
                self.mountPoint = shell.read().strip()
            y += 1
        
    
    #Function to export list
    def exportList(self):
        summary = {
            "diskNumber" : self.diskNumber,
            "diskName" : self.diskName,
            "storageFree" : self.storageFree,
            "storageUsed" : self.storageUsed,
            "totalStorage" : self.totalStorage,
            "diskPercentage" : self.diskPercentage,
            "mountPoint" : self.mountPoint
        }
        return summary
    
#Node Object
class Node:
    #Variables
    global hostname
    global isOnline
    global processor
    global memory
    global NICs
    global linuxDisks

    #Initialization
    shell = os.popen("hostname")
    hostname = shell.read().strip()
    processor = CPU()
    memory = RAM()
    NICs = list()
    linuxDisks = list()

    #Function to initialize node
    #def __init__(self):

    #Function to initialize NICs
    def initNICs(self):
        i = 1
        nicsFound = False

        while (nicsFound == False):
            shell = os.popen(IPCommand.format(i))
            tempIP = shell.read().strip()
            if bool(tempIP) == True:
                tempNIC = NIC(i)
                NICs.append(tempNIC)
                i += 1
            else:
                nicsFound = True    
    
    #Function to initialize LinuxDisks
    def initLinuxDisks(self):
        shell = os.popen(dfhCommand.format("| wc -l"))
        diskCount = shell.read()
        diskCount = int(diskCount)

    #Function to get CPU
    def getCPU():
        return processor

    #Function to get RAM
    def getRAM():
        return memory

    #Function to get entire NICList
    def getNICList():
        return NICs
    
    #Function to get entire LinuxDiskList
    def getLinuxDiskList():
        return linuxDisks
    
    #Function to get Specific NIC from NICList
    def getSpecificNIC(nicNumber):
        return NICs[nicNumber]
    
    #Update Function
    def update():
        processor.update()
        memory.update()

        counter = 1
        for i in NICs:
            i.update(counter)

            #If MAC Address is not present, then the NIC is invalid and must be removed.
            if bool(i.MAC) == False:
                NICs.remove(i)

            counter += 1
        
        counter = 1
        for i in linuxDisks:
            i.update(counter)
            counter += 1

    #Function made to print statistics
    def printStats():
        print(hostname)
        print("\n")
        print(processor.exportList())
        print("\n")
        print(memory.exportList())
        print("\n")

        counter = 1
        for i in NICs:
            counter += 1
            print(i.exportList())
            print("\n")

        counter = 1    
        for i in linuxDisks:
            counter += 1
            print(i.exportList())
            print("\n")
        return 0

#Main Method
def main():
    node = Node()
    node.initNICs()

    counter = 0
    while True:
        if counter != 10000:
            counter +=1
        else:
            counter = 0
            Node.update()
            Node.printStats()
            
main()